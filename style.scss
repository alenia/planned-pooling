.swatch {
  margin: 5px 0;
}

.shell .stitch {
  clip-path: polygon(60% 0, 85% 20%, 100% 50%, 85% 80%, 60% 100%, 0 50%);
}

.v-stitch .stitch {
  clip-path: polygon(100% 0, 100% 25%, 50% 50%, 100% 75%, 100% 100%, 0 50%);
}

.stacked .stitch {
  margin: 1px;
  border: 1px solid black;
}

.flexed.stacked .stitch {
  height: 12px;
  width: 20px;
}

.flexed {
  display: flex;
  flex-direction: row;
  .crow {
    display: flex;
    flex-direction: column;
  }

  .crow:nth-child(2n) {
    flex-direction: column-reverse;
  }
}

.flexed.v-stitch {
  .stitch {
    width: 20px;
    height: 20px;
  }
}

.flexed.shell {
  $stitchHeight: 25px;
  $stitchWidth: 16px;
  $stitchSpacingVertical: 2px;
  .crow:nth-child(2n) {
    margin-top: $stitchHeight/2 + $stitchSpacingVertical;
  }
  .stitch {
    height: $stitchHeight;
    width: $stitchWidth;
    margin-top: $stitchSpacingVertical;
    margin-bottom: $stitchSpacingVertical;
    margin-right: -.37 * $stitchWidth;
  }
}

.flexed.moss {
  $stitchHeight: 14px;
  $stitchWidth: 26px;
  $stitchSpacingVertical: 1px;
  .crow:nth-child(2n) {
    margin-top: $stitchHeight + $stitchSpacingVertical;
  }
  .stitch {
    box-sizing: border-box;
    border: 1px solid black;
    height: $stitchHeight;
    width: $stitchWidth;
    margin-top: $stitchHeight + $stitchSpacingVertical;
    margin-bottom: $stitchSpacingVertical;
    margin-right: -1/2*$stitchWidth;
    margin-left: 1px;
  }
}

$crochetRowLength: 11; //crochet row, which is grid column. Try 10, 11, 12, 21, 22, 23

//some code adapted from https://gist.github.com/IngoVals/0efd31cbe56241486fb9adb87ef6fd81

@mixin snake-row-grid($rows) {
  grid-template-rows: repeat($rows, auto);

  $repeat: $rows*2;
  @for $i from 1 through $rows {
    & > :nth-child(#{$repeat}n + #{$rows + $i}) {
      grid-row: $rows - $i + 1;
    }
  }
}

@mixin interlaced-snake-row-grid($rows) {
  grid-template-rows: repeat(2*$rows, auto);

  $repeat: $rows*2;
  @for $i from 1 through $rows {
    & > :nth-child(#{$repeat}n + #{$rows + $i}) {
      grid-row: $repeat - 2*$i + 1;
    }
  }

  :nth-child(n + #{$rows + 1}):nth-child(-n + #{2*$rows}) {
    grid-column-start: 2;
  }

  > * {
    grid-column-end: span 2;
  }
}

@mixin snakeskin($row-height, $column-width) {
  display: grid;
  grid-auto-columns: $column-width;
  grid-auto-flow: column dense;
  > * {
    height: $row-height;
  }
}

.grid.stacked {
  @include snake-row-grid($crochetRowLength);
  @include snakeskin(12px, 24px);
}

.grid.v-stitch {
  @include snake-row-grid($crochetRowLength);
  @include snakeskin(20px, 20px);
}
.grid.moss {
  @include interlaced-snake-row-grid($crochetRowLength);
  @include snakeskin(12px, 14px);
  .stitch {
    margin: 1px;
    border: 1px solid black;
  }
}

.grid.granny {
  @include interlaced-snake-row-grid($crochetRowLength);
  @include snakeskin(18px, 18px);
  
  > * {
    margin: 0 7px;
    border: 1px solid black;
  }
}

.grid.shell {
  @include interlaced-snake-row-grid($crochetRowLength);
  @include snakeskin(25px, 10px);

  .stitch {
    margin: -4px 2px;
  }
}
