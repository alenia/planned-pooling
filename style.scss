$crochetRowLength: 11; //crochet row, which is grid column. Try 10, 11, 12, 21, 22, 23

$rowLengthA: $crochetRowLength;
$rowLengthB: $crochetRowLength; 

//taken from https://gist.github.com/IngoVals/0efd31cbe56241486fb9adb87ef6fd81
@mixin snake-rows($rows) {
  $repeat: $rows*2;
  @for $i from 1 through $rows {
    & > :nth-child(#{$repeat}n + #{$rows + $i}) {
      grid-row: $rows - $i + 1;
    }
  }
}
@mixin interlaced-snake-rows($rows) {
  $repeat: $rows*2;
  @for $i from 1 through $rows {
    & > :nth-child(#{$repeat}n + #{$rows + $i}) {
      grid-row: $repeat - 2*$i + 1;
    }
  }
}

// A mixin to include inside container with uniformly sizes columns and rows and a snake wrap
// usage: .container { @include snake-row-grid(10, 50px, 200px);

@mixin snake-row-grid($rows, $row-height, $column-width) {
  display: grid;
  grid-template-rows: repeat($rows, $row-height);
  grid-auto-columns: $column-width;
  grid-auto-flow: column dense;
  @include snake-rows($rows);
}

@mixin interlaced-snake-row-grid($rows, $row-height, $column-width) {
  display: grid;
  grid-template-rows: repeat(2*$rows, $row-height);
  grid-auto-columns: $column-width;
  grid-auto-flow: column dense;
  @include interlaced-snake-rows($rows);
  :nth-child(n + #{$rows + 1}):nth-child(-n + #{2*$rows}) {
    grid-column-start: 2;
  }
}

.containerA {
  @include interlaced-snake-row-grid($rowLengthA, 12px, 14px);
  
  div {
    grid-gap:5px;
    margin: 1px 3px;
    border: 1px solid black;
    grid-column-end: span 2;
  }


}
.containerB {
  @include snake-row-grid($rowLengthB, 12px, 20px);
  margin-top: 5px;
  div {
    grid-gap:5px;
    margin: 1px;
    border: 1px solid black;
  }
}
